name: Quick APK Build

on:
  workflow_dispatch:
    inputs:
      version_name:
        description: 'Version name (e.g., 1.0.1)'
        required: false
        default: '1.0.0'
      build_mode:
        description: 'Build mode'
        required: true
        default: 'release'
        type: choice
        options:
        - release
        - debug
        - profile

jobs:
  quick-build:
    name: Quick Build APK
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true

    - name: Flutter Doctor
      run: flutter doctor -v

    - name: Get Dependencies
      run: flutter pub get

    - name: Setup Environment
      run: |
        echo "Creating .env.release file..."
        cat > .env.release << EOF
        MODEL_PROVIDER=openrouter
        MODEL_BASE_URL=https://openrouter.ai/api/v1
        MODEL_API_KEY=sk-or-v1
        MODEL_NAME=deepseek/deepseek-chat-v3-0324:free
        USE_LOCAL_CONFIG=false
        EOF

    - name: Build APK
      run: |
        echo "Building APK in ${{ github.event.inputs.build_mode }} mode..."
        flutter build apk \
          --${{ github.event.inputs.build_mode }} \
          --build-name="${{ github.event.inputs.version_name }}" \
          --build-number="${{ github.run_number }}" \
          --verbose

    - name: Prepare APK for Upload
      run: |
        # Create output directory
        mkdir -p apk-output

        # Find and copy APK
        APK_PATH=$(find build/app/outputs/flutter-apk -name "*.apk" | head -1)
        if [ -f "$APK_PATH" ]; then
          APK_NAME="lumma-${{ github.event.inputs.build_mode }}-v${{ github.event.inputs.version_name }}-build${{ github.run_number }}.apk"
          cp "$APK_PATH" "apk-output/$APK_NAME"
          echo "✅ APK prepared: $APK_NAME"
          ls -la apk-output/
        else
          echo "❌ APK not found!"
          exit 1
        fi

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: lumma-apk-${{ github.event.inputs.build_mode }}-v${{ github.event.inputs.version_name }}
        path: apk-output/*.apk
        retention-days: 7

    - name: Build Info
      run: |
        echo "🎉 Build completed successfully!"
        echo "📱 Mode: ${{ github.event.inputs.build_mode }}"
        echo "🏷️ Version: ${{ github.event.inputs.version_name }}"
        echo "🔢 Build: ${{ github.run_number }}"
        echo "📦 APK is available in artifacts"
