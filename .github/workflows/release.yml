name: Release Build

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

env:
  APP_NAME: lumma

jobs:
  releaseAndroid:
    name: Release Android
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.5'
          channel: 'stable'
          cache: true

      - name: Verify Flutter Installation
        run: |
          flutter config --no-analytics
          flutter doctor -v
          flutter --version

      - name: Install Dependencies
        run: flutter pub get

      - name: Extract Version Info
        id: version
        run: |
          TAG="${{ github.ref_name }}"
          VERSION=$(echo $TAG | sed 's/^v//')
          BUILD_NUM="${{ github.run_number }}"

          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUM" >> $GITHUB_OUTPUT

          echo "=== Build Info ==="
          echo "Tag: $TAG"
          echo "Version: $VERSION"
          echo "Build Number: $BUILD_NUM"

      - name: Create Environment File
        run: |
          cat > .env.release << EOF
          MODEL_PROVIDER=openrouter
          MODEL_BASE_URL=https://openrouter.ai/api/v1
          MODEL_API_KEY=sk-or-v1
          MODEL_NAME=deepseek/deepseek-chat-v3-0324:free
          USE_LOCAL_CONFIG=false
          EOF

      - name: Setup Android Signing
        run: |
          # 使用调试签名进行GitHub Actions构建
          # 在android目录下创建调试keystore的符号链接
          cd android
          if [ ! -f "app/debug.keystore" ]; then
            # 如果debug.keystore不存在，创建一个
            keytool -genkey -v -keystore app/debug.keystore -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000 -dname "CN=Android Debug,O=Android,C=US"
          fi

          # 创建临时的release keystore指向debug keystore
          if [ ! -f "my-release-key.jks" ]; then
            cp app/debug.keystore my-release-key.jks
          fi

      - name: Build Android Release APK
        run: |
          flutter build apk \
            --release \
            --build-name="${{ steps.version.outputs.version }}" \
            --build-number="${{ steps.version.outputs.build_number }}" \
            --target-platform android-arm64 \
            --no-shrink

      - name: Prepare Release Files
        run: |
          mkdir -p release-files

          # Copy ARM64 APK file
          if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            cp "build/app/outputs/flutter-apk/app-release.apk" \
               "release-files/${{ env.APP_NAME }}_${{ steps.version.outputs.version }}_arm64.apk"
            echo "✅ ARM64 APK ready"
          else
            echo "❌ ARM64 APK not found"
            exit 1
          fi

          echo "📦 Release files:"
          ls -la release-files/

      - name: Upload Android Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-release
          path: release-files/*.apk
          retention-days: 30

  releaseLinux:
    name: Release Linux AppImage
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.5'
          channel: 'stable'
          cache: true

      - name: Install Linux Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            clang \
            cmake \
            ninja-build \
            pkg-config \
            libgtk-3-dev \
            liblzma-dev \
            libstdc++-12-dev \
            wget \
            file \
            imagemagick \
            fuse

      - name: Verify Flutter Installation
        run: |
          flutter config --no-analytics
          flutter doctor -v
          flutter --version
          flutter config --enable-linux-desktop

      - name: Install Dependencies
        run: flutter pub get

      - name: Extract Version Info
        id: version
        run: |
          TAG="${{ github.ref_name }}"
          VERSION=$(echo $TAG | sed 's/^v//')
          BUILD_NUM="${{ github.run_number }}"

          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUM" >> $GITHUB_OUTPUT

          echo "=== Build Info ==="
          echo "Tag: $TAG"
          echo "Version: $VERSION"
          echo "Build Number: $BUILD_NUM"

      - name: Create Environment File
        run: |
          cat > .env.release << EOF
          MODEL_PROVIDER=openrouter
          MODEL_BASE_URL=https://openrouter.ai/api/v1
          MODEL_API_KEY=sk-or-v1
          MODEL_NAME=deepseek/deepseek-chat-v3-0324:free
          USE_LOCAL_CONFIG=false
          EOF

      - name: Build Linux Release
        run: |
          flutter build linux \
            --release \
            --build-name="${{ steps.version.outputs.version }}" \
            --build-number="${{ steps.version.outputs.build_number }}" \
            --verbose

      - name: Verify Linux Build
        run: |
          echo "🔍 Verifying Linux build output..."
          if [ -d "build/linux/x64/release/bundle" ]; then
            echo "✅ Linux build directory exists"
            ls -la build/linux/x64/release/bundle/

            if [ -f "build/linux/x64/release/bundle/lumma" ]; then
              echo "✅ Lumma executable found"
              file build/linux/x64/release/bundle/lumma
            else
              echo "❌ Lumma executable not found"
              exit 1
            fi
          else
            echo "❌ Linux build directory not found"
            exit 1
          fi

      - name: Download AppImageTool
        run: |
          mkdir -p linux/build
          wget -O linux/build/appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x linux/build/appimagetool

      - name: Create AppImage Structure
        run: |
          APP_NAME="${{ env.APP_NAME }}"
          APP_DIR="linux/build/${APP_NAME}.AppDir"

          # Create AppDir structure
          mkdir -p $APP_DIR/usr/bin
          mkdir -p $APP_DIR/usr/lib
          mkdir -p $APP_DIR/usr/share/applications
          mkdir -p $APP_DIR/usr/share/icons/hicolor/256x256/apps

          # Copy the built application
          cp -r build/linux/x64/release/bundle/* $APP_DIR/usr/bin/

          # Copy required libraries
          echo "📚 Copying required libraries..."
          # Copy system libraries that might be needed
          mkdir -p $APP_DIR/usr/lib/x86_64-linux-gnu

          # Find and copy Flutter engine libraries
          if [ -d "build/linux/x64/release/bundle/lib" ]; then
            cp -r build/linux/x64/release/bundle/lib/* $APP_DIR/usr/lib/ 2>/dev/null || true
          fi

          # Create desktop file
          cat > $APP_DIR/usr/share/applications/$APP_NAME.desktop << EOF
          [Desktop Entry]
          Name=Lumma
          Comment=AI-powered Q&A Diary App
          Exec=$APP_NAME
          Icon=$APP_NAME
          Type=Application
          Categories=Office;
          StartupNotify=true
          EOF

          # Create AppRun script
          cat > $APP_DIR/AppRun << 'EOF'
          #!/bin/bash

          # Get the directory where this AppImage is located
          HERE="$(dirname "$(readlink -f "${0}")")"

          # Set up library paths
          export LD_LIBRARY_PATH="${HERE}/usr/lib:${HERE}/usr/lib/x86_64-linux-gnu:${LD_LIBRARY_PATH}"

          # Change to the application directory
          cd "${HERE}/usr/bin"

          # Execute the application
          exec "${HERE}/usr/bin/lumma" "$@"
          EOF
          chmod +x $APP_DIR/AppRun

          # Copy icon (use a default icon if app icon doesn't exist)
          if [ -f "assets/icon/icon.svg" ]; then
            # Convert JPG to PNG for better AppImage support
            convert "assets/icon/icon.svg" -resize 256x256 "$APP_DIR/usr/share/icons/hicolor/256x256/apps/$APP_NAME.png"
            echo "✅ Application icon converted and copied"
          else
            # Create a simple placeholder icon
            echo "⚠️ App icon not found, creating placeholder..."
            convert -size 256x256 xc:lightblue -pointsize 72 -fill darkblue -gravity center -annotate +0+0 "L" "$APP_DIR/usr/share/icons/hicolor/256x256/apps/$APP_NAME.png" || \
            wget -O "$APP_DIR/usr/share/icons/hicolor/256x256/apps/$APP_NAME.png" https://via.placeholder.com/256x256/lightblue/darkblue?text=L
          fi

          # Create symlinks for desktop file and icon at root level
          ln -sf usr/share/applications/$APP_NAME.desktop $APP_DIR/
          ln -sf usr/share/icons/hicolor/256x256/apps/$APP_NAME.png $APP_DIR/

          echo "AppDir structure created:"
          find $APP_DIR -type f | head -20

      - name: Create AppImage
        run: |
          APP_NAME="${{ env.APP_NAME }}"
          VERSION="${{ steps.version.outputs.version }}"
          APP_DIR="linux/build/${APP_NAME}.AppDir"

          # Create AppImage
          ./linux/build/appimagetool "${APP_DIR}" "linux/build/${APP_NAME}-${VERSION}-x86_64.AppImage"

          # Verify AppImage was created
          if [ -f "linux/build/${APP_NAME}-${VERSION}-x86_64.AppImage" ]; then
            echo "✅ AppImage created successfully"
            ls -la "linux/build/${APP_NAME}-${VERSION}-x86_64.AppImage"
            file "linux/build/${APP_NAME}-${VERSION}-x86_64.AppImage"

            # Test AppImage structure
            echo "🔍 Testing AppImage structure..."
            ./linux/build/appimagetool --appimage-extract-and-run "linux/build/${APP_NAME}-${VERSION}-x86_64.AppImage" --help 2>/dev/null || echo "AppImage help test completed"

            # Make the AppImage executable
            chmod +x "linux/build/${APP_NAME}-${VERSION}-x86_64.AppImage"

            echo "📊 AppImage size: $(du -h "linux/build/${APP_NAME}-${VERSION}-x86_64.AppImage" | cut -f1)"
          else
            echo "❌ AppImage creation failed"
            echo "Available files in linux/build/:"
            ls -la linux/build/ || echo "Build directory not found"
            exit 1
          fi

      - name: Prepare Linux Release Files
        run: |
          mkdir -p release-files-linux

          VERSION="${{ steps.version.outputs.version }}"
          APP_NAME="${{ env.APP_NAME }}"

          # Copy AppImage
          if [ -f "linux/build/${APP_NAME}-${VERSION}-x86_64.AppImage" ]; then
            cp "linux/build/${APP_NAME}-${VERSION}-x86_64.AppImage" \
               "release-files-linux/${APP_NAME}_${VERSION}_linux_x86_64.AppImage"
            echo "✅ Linux AppImage ready"
          else
            echo "❌ Linux AppImage not found"
            exit 1
          fi

          echo "📦 Linux Release files:"
          ls -la release-files-linux/

      - name: Upload Linux Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-release
          path: release-files-linux/*.AppImage
          retention-days: 30

  releaseiOS:
    name: Release iOS
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.5'
          channel: 'stable'
          cache: true

      - name: Verify Flutter Installation
        run: |
          flutter config --no-analytics
          flutter doctor -v
          flutter --version

      - name: Install Dependencies
        run: flutter pub get

      - name: Extract Version Info
        id: version
        run: |
          TAG="${{ github.ref_name }}"
          VERSION=$(echo $TAG | sed 's/^v//')
          BUILD_NUM="${{ github.run_number }}"

          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUM" >> $GITHUB_OUTPUT

          echo "=== Build Info ==="
          echo "Tag: $TAG"
          echo "Version: $VERSION"
          echo "Build Number: $BUILD_NUM"

      - name: Create Environment File
        run: |
          cat > .env.release << EOF
          MODEL_PROVIDER=openrouter
          MODEL_BASE_URL=https://openrouter.ai/api/v1
          MODEL_API_KEY=sk-or-v1
          MODEL_NAME=deepseek/deepseek-chat-v3-0324:free
          USE_LOCAL_CONFIG=false
          EOF

      - name: Setup iOS Environment
        run: |
          # 检查Xcode版本和iOS模拟器
          echo "Setting up iOS build environment"
          xcodebuild -version
          xcrun simctl list devices | head -10

          # 安装CocoaPods依赖
          cd ios
          sudo gem install cocoapods --version 1.15.2
          pod install --repo-update

      - name: Clean iOS Build
        run: |
          cd ios
          xcodebuild clean -workspace Runner.xcworkspace -scheme Runner -configuration Release
          rm -rf build/

      - name: Build iOS Release App
        run: |
          flutter build ios \
            --release \
            --build-name="${{ steps.version.outputs.version }}" \
            --build-number="${{ steps.version.outputs.build_number }}" \
            --no-codesign \
            --verbose

      - name: Create iOS Archive
        run: |
          cd ios

          # 创建archive
          xcodebuild \
            -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -destination generic/platform=iOS \
            -archivePath build/Runner.xcarchive \
            CODE_SIGNING_ALLOWED=NO \
            DEVELOPMENT_TEAM="" \
            CODE_SIGN_IDENTITY="" \
            PROVISIONING_PROFILE="" \
            archive

      - name: Create IPA from Archive
        run: |
          cd ios

          # 检查archive是否创建成功
          if [ ! -d "build/Runner.xcarchive" ]; then
            echo "❌ Archive not found!"
            exit 1
          fi

          # 提取.app文件并创建IPA
          APP_PATH="build/Runner.xcarchive/Products/Applications/Runner.app"
          if [ -d "$APP_PATH" ]; then
            echo "✅ Found Runner.app"

            # 创建Payload目录结构
            mkdir -p build/Payload
            cp -r "$APP_PATH" build/Payload/

            # 创建IPA文件
            cd build
            zip -r Runner.ipa Payload/
            echo "✅ IPA created successfully"
          else
            echo "❌ Runner.app not found in archive"
            ls -la build/Runner.xcarchive/Products/ || echo "Products directory not found"
            exit 1
          fi

      - name: Prepare iOS Release Files
        run: |
          mkdir -p release-files-ios

          # 查找并复制IPA文件
          if [ -f "ios/build/Runner.ipa" ]; then
            cp "ios/build/Runner.ipa" \
               "release-files-ios/${{ env.APP_NAME }}_${{ steps.version.outputs.version }}_ios.ipa"
            echo "✅ iOS IPA ready"
          else
            echo "❌ iOS IPA not found"
            echo "Available files in ios/build/:"
            ls -la ios/build/ || echo "Build directory not found"
            exit 1
          fi

          echo "📦 iOS Release files:"
          ls -la release-files-ios/

      - name: Upload iOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-release
          path: release-files-ios/*.ipa
          retention-days: 30

  createRelease:
    name: Create Unified Release
    runs-on: ubuntu-22.04
    needs: [releaseAndroid, releaseLinux, releaseiOS]
    if: always() && (needs.releaseAndroid.result == 'success' || needs.releaseLinux.result == 'success' || needs.releaseiOS.result == 'success')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract Version Info
        id: version
        run: |
          TAG="${{ github.ref_name }}"
          VERSION=$(echo $TAG | sed 's/^v//')
          BUILD_NUM="${{ github.run_number }}"

          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUM" >> $GITHUB_OUTPUT

      - name: Download Android Artifacts
        if: needs.releaseAndroid.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: android-release
          path: ./artifacts/android/
        continue-on-error: true

      - name: Download Linux Artifacts
        if: needs.releaseLinux.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: linux-release
          path: ./artifacts/linux/
        continue-on-error: true

      - name: Download iOS Artifacts
        if: needs.releaseiOS.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: ios-release
          path: ./artifacts/ios/
        continue-on-error: true

      - name: Create Unified Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: ${{ env.APP_NAME }} ${{ steps.version.outputs.tag }}
          files: |
            ./artifacts/android/*.apk
            ./artifacts/linux/*.AppImage
            ./artifacts/ios/*.ipa
          body: |
            # 🌟 ${{ env.APP_NAME }} ${{ steps.version.outputs.tag }}

            **AI-powered Q&A Diary App / AI驱动的智能问答日记应用**

            ## 🔧 Technical Info / 技术信息
            - **Version / 版本**: ${{ steps.version.outputs.version }}
            - **Build Number / 构建号**: ${{ steps.version.outputs.build_number }}
            - **Commit / 提交**: ${{ github.sha }}
            - **Flutter Version / Flutter版本**: 3.32.5

            ## 📱 Platform Support / 平台支持

            ### Android
            ${{ needs.releaseAndroid.result == 'success' && '✅ APK available for download' || '❌ Android build failed' }}

            ### iOS
            ${{ needs.releaseiOS.result == 'success' && '✅ IPA available for download' || '❌ iOS build failed' }}

            ### Linux
            ${{ needs.releaseLinux.result == 'success' && '✅ AppImage available for download' || '❌ Linux build failed' }}

            ## 📝 Installation Notes / 安装说明

            ### Android
            - Direct installation from APK file
            - 直接从APK文件安装

            ### iOS
            > ⚠️ This is an unsigned development build. You may need to trust the developer certificate in iOS Settings > General > VPN & Device Management.
            > ⚠️ 这是未签名的开发版本，你可能需要在iOS设置 > 通用 > VPN与设备管理中信任开发者证书。

            ### Linux
            - Download the AppImage file
            - Make it executable: `chmod +x lumma_*.AppImage`
            - Run directly: `./lumma_*.AppImage`
            - 下载AppImage文件，设置可执行权限后直接运行
            ---

            > 💡 If you encounter installation or usage issues, please report them in Issues.
            > 💡 如果遇到安装或使用问题，请在Issues中反馈
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
